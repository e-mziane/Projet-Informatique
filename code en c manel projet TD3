#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LIVRES 100

struct auteur {
    char nom[50];
    char prenom[30];
};

struct livres {
    char titre[200];
    struct auteur auteur[5];
    char editeur[50];
    long long ISBN;
    int quantite;
    char frequence[20];
};

void lister_ouvrages() {
    for (int i = 0; i < nb_ouvrages; i++) {
        printf("ISBN: %s\n", ouvrages[i].ISBN);
        printf("Titre: %s\n", ouvrages[i].titre);
        printf("Auteur: %s\n", ouvrages[i].auteur);
        printf("Quantité: %d\n\n", ouvrages[i].quantite);
    }
        }
        printf("ISBN : %lld\n", Livres[i].ISBN);
        printf("Quantite : %d\n", Livres[i].quantite);
        printf("Statut de vente : %s\n", Livres[i].frequence);
        printf("\n");
    }
}

void saisirAuteurs(struct auteur *auteur) {
    printf("Saisir le nom de l'auteur : ");
    fflush(stdout);
    fgets(auteur->nom, 50, stdin);

    printf("Saisir le prénom de l'auteur : ");
    fflush(stdout);
    fgets(auteur->prenom, 30, stdin);

    auteur->nom[strcspn(auteur->nom, "\n")] = '\0';
    auteur->prenom[strcspn(auteur->prenom, "\n")] = '\0';
}

int ajoutlivre(struct livres Livres[], int *numLivres) {
    int i = *numLivres;
    int nbAuteurs;

    printf("Saisir le nombre d'auteurs : ");
    fflush(stdout);
    scanf("%d", &nbAuteurs);

    for (int j = 0; j < nbAuteurs; j++) {
        saisirAuteurs(&(Livres[i].auteur[j]));
    }

    printf("Entrez le titre du livre : ");
    fflush(stdout);
    fgets(Livres[i].titre, 200, stdin);

    char isbn[14];
    do {
        printf("Entrez l'ISBN du livre (13 chiffres) : ");
        fflush(stdout);
        fgets(isbn, 14, stdin);
        isbn[strcspn(isbn, "\n")] = '\0';
    } while (strlen(isbn) != 13);

    Livres[i].ISBN = atoll(isbn);

    printf("Entrez l'éditeur du livre : ");
    fflush(stdout);
    fgets(Livres[i].editeur, 50, stdin);

    printf("Entrez la quantité du livre : ");
    fflush(stdout);
    scanf("%d", &(Livres[i].quantite));

    strcpy(Livres[i].frequence, "Statut de vente indéfini");
    (*numLivres)++;
    return i;
}
void supprimer_ouvrage() {
    char ISBN[14];
    printf("ISBN de l'ouvrage à supprimer: ");
    scanf("%s", ISBN);

    for (int i = 0; i < nb_ouvrages; i++) {
        if (strcmp(ouvrages[i].ISBN, ISBN) == 0) {
            for (int j = i; j < nb_ouvrages - 1; j++) {
                ouvrages[j] = ouvrages[j + 1];
            }
            nb_ouvrages--;
            break;
        }
    }
}

void afficherLivresaCommander(struct livres Livres[], int numLivres) {
    printf("Livres à commander (moins de 5 exemplaires et vendus fréquemment) :\n");
    for (int i = 0; i < numLivres; i++) {
        if (Livres[i].quantite < 5 && strcmp(Livres[i].frequence, "fréquemment vendu") == 0) {
            printf("Le titre du livre %d : %s\n", i + 1, Livres[i].titre);
            printf("Editeur : %s\n", Livres[i].editeur);
            for (int j = 0; j < 5; j++) {
                // Check if the author's name is not empty
                if (Livres[i].auteur[j].nom[0] != '\0' && Livres[i].auteur[j].prenom[0] != '\0') {
                    printf("Auteur %d de l'oeuvre : %s %s\n", j + 1, Livres[i].auteur[j].nom, Livres[i].auteur[j].prenom);
                }
            }
            printf("ISBN : %lld\n", Livres[i].ISBN);
            printf("Quantité : %d\n", Livres[i].quantite);
            printf("Le statut de vente du livre est : %s\n", Livres[i].frequence);
            printf("\n");
        }
    }
}

void chercherLivreParISBN(struct livres Livres[], int numLivres) {
    char isbn[14];
    do {
        printf("Entrez l'ISBN du livre à chercher (13 chiffres) : ");
        fflush(stdout);
        fgets(isbn, 14, stdin);
        isbn[strcspn(isbn, "\n")] = '\0';  // Supprime le caractère de nouvelle ligne
    } while (verifisbn1(isbn) != 1);

    int livreTrouve = 0;
    for (int i = 0; i < numLivres; i++) {
        if (atoll(isbn) == Livres[i].ISBN) {
            livreTrouve = 1;
            printf("Le livre recherché a été trouvé, le voici :\n");
            printf("Le titre du livre : %s\n", Livres[i].titre);
            printf("Editeur : %s\n", Livres[i].editeur);
            for (int j = 0; j < 5; j++) {
                // Check if the author's name is not empty
                if (Livres[i].auteur[j].nom[0] != '\0' && Livres[i].auteur[j].prenom[0] != '\0') {
                    printf("Auteur %d de l'oeuvre : %s %s\n", j + 1, Livres[i].auteur[j].nom, Livres[i].auteur[j].prenom);
                }
            }
            printf("ISBN : %lld\n", Livres[i].ISBN);
            printf("Quantité : %d\n", Livres[i].quantite);
            printf("Le statut de vente du livre est : %s\n", Livres[i].frequence);
            printf("\n");
            break;
        }
    }
    if (!livreTrouve) {
        printf("Aucun livre trouvé avec cet ISBN.\n");
    }
}
void chercherLivreParAuteur(struct livres Livres[], int numLivres) {
    char nom[50];
    char prenom[30];
    printf("Entrez le nom de l'auteur : ");
    fflush(stdout);
    fgets(nom, 50, stdin);
    printf("Entrez le prénom de l'auteur : ");
    fflush(stdout);
    fgets(prenom, 30, stdin);

    int livreTrouve = 0;
    for (int i = 0; i < numLivres; i++) {
        for (int j = 0; j < 5; j++) {
            if (strcmp(nom, Livres[i].auteur[j].nom) == 0 && strcmp(prenom, Livres[i].auteur[j].prenom) == 0) {
                livreTrouve = 1;
                printf("Le livre recherché a été trouvé, le voici :\n");
                printf("Le titre du livre : %s\n", Livres[i].titre);
                printf("Editeur : %s\n", Livres[i].editeur);
                for (int k = 0; k < 5; k++) {
                    // Check if the author's name is not empty
                    if (Livres[i].auteur[k].nom[0] != '\0' && Livres[i].auteur[k].prenom[0] != '\0') {
                        printf("Auteur %d de l'oeuvre : %s %s\n", k + 1, Livres[i].auteur[k].nom, Livres[i].auteur[k].prenom);
                    }
                }
                printf("ISBN : %lld\n", Livres[i].ISBN);
                printf("Quantité : %d\n", Livres[i].quantite);
                printf("Le statut de vente du livre est : %s\n", Livres[i].frequence);
                printf("\n");
                return;
            }
        }
    }
    if (!livreTrouve) {
        printf("Aucun livre trouvé pour cet auteur.\n");
    }
}

int main(void) {
    struct livres Liste[MAX_LIVRES];
    int i = 0;
    int numLivres = i;
    int choix;

    do {
        printf("1 Afficher la liste\n");
        printf("2 Ajouter un livre\n");
        printf("3 Quitter\n");
        printf("Choisissez une option : ");
        fflush(stdout);
        scanf("%d", &choix);

        switch (choix) {
            case 1:
                Lister_ouvrages(Livre, numLivres);
                break;
            case 2:
                i = ajoutlivre(biblio, &numLivres);
                break;
            case 3:
                printf("Au revoir !\n");
                break;
            default:
                printf("Option invalide\n");
                break;
        }
    } while (choix != 3);

    return 0;
}
void recherchelivre(struct livres Livres[], int *numLivres) {
    int choix;
    printf(" Vous allez devoir choisir la façon dont vous voulez que la recherche de livre se passe\n");
    printf("1 par l'ISBN\n");
    printf("2 par Auteur\n");
    fflush(stdout);
    scanf("%d", &choix);
    switch (choix) {
        case 1:
            recherche_livre_par_isbn(Livres, numLivres);
            break;
        case 2:
            recherche_livre_par_auteur(Livres, numLivres);
            break;
        default:
            printf("Saisie non valide, veuillez recommencer.\n");
            break;
    }
}
